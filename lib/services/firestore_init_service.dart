// üå± SERVICE D'INITIALISATION - SANS MIGRATION D'UTILISATEURS
// Fichier: lib/services/firestore_init_service.dart

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:sama_minifoot/services/terrain_service.dart';
import '../models/user.dart';
import '../models/terrain.dart';
import '../models/avis.dart';

class FirestoreInitService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// Initialise seulement les terrains (les utilisateurs sont modifi√©s manuellement)
  static Future<void> initializeTestData() async {
    try {
      print('üå± Initialisation des terrains de test...');
      print('üë• Note: Utilisateurs existants pr√©serv√©s (modification manuelle)');

      // V√©rifier si les terrains existent d√©j√†
      final terrainsSnapshot = await _firestore.collection('terrains').limit(1).get();
      if (terrainsSnapshot.docs.isNotEmpty) {
        print('‚úÖ Terrains d√©j√† initialis√©s');
        
        // Toujours recr√©er les avis pour corriger le probl√®me
        await _createTestAvis();
        
        await _showIndexInstructions(); // Toujours afficher les instructions index
        return;
      }

      // Afficher les stats des utilisateurs existants
      await _showExistingUsersStats();

      // Cr√©er les terrains de test
      await _createTestTerrains();

      // Cr√©er des avis de test
      await _createTestAvis();

      // Afficher les instructions pour les index
      await _showIndexInstructions();

      print('‚úÖ Terrains de test cr√©√©s avec succ√®s');
      print('üí° Les nouveaux utilisateurs auront automatiquement la structure compl√®te');
    } catch (e) {
      print('‚ùå Erreur lors de l\'initialisation: $e');
      rethrow;
    }
  }

  /// Affiche les statistiques des utilisateurs existants
  static Future<void> _showExistingUsersStats() async {
    try {
      final usersSnapshot = await _firestore.collection('users').get();

      if (usersSnapshot.docs.isEmpty) {
        print('‚ÑπÔ∏è Aucun utilisateur existant');
        return;
      }

      int joueurs = 0;
      int gerants = 0;
      int withPhoto = 0;
      int withStats = 0;
      int active = 0;

      print('\nüìä UTILISATEURS EXISTANTS:');
      print('${'Nom'.padRight(20)} | ${'R√¥le'.padRight(8)} | Photo | Stats | Actif');
      print('-' * 60);

      for (final doc in usersSnapshot.docs) {
        final data = doc.data();
        final nom = (data['nom'] as String? ?? 'Nom manquant').padRight(20);
        final role = (data['role'] as String? ?? 'Inconnu').padRight(8);
        final hasPhoto = data.containsKey('photo') ? '‚úÖ' : '‚ùå';
        final hasStats = data.containsKey('statistiques') ? '‚úÖ' : '‚ùå';
        final isActive = data.containsKey('isActive') ? '‚úÖ' : '‚ùå';

        print('$nom | $role | $hasPhoto     | $hasStats     | $isActive');

        // Compter
        if (data['role'] == 'joueur') joueurs++;
        if (data['role'] == 'gerant') gerants++;
        if (data.containsKey('photo')) withPhoto++;
        if (data.containsKey('statistiques')) withStats++;
        if (data.containsKey('isActive')) active++;
      }

      print('\nüìà R√âSUM√â:');
      print('üë• Total utilisateurs: ${usersSnapshot.docs.length}');
      print('üéÆ Joueurs: $joueurs');
      print('üè¢ G√©rants: $gerants');
      print('üì∏ Avec champ photo: $withPhoto');
      print('üìä Avec statistiques: $withStats');
      print('üü¢ Avec isActive: $active');

      final missingFields = usersSnapshot.docs.length - withStats;
      if (missingFields > 0) {
        print('\n‚ö†Ô∏è $missingFields utilisateur(s) √† modifier manuellement dans Firebase Console');
        print('üí° Nouveaux utilisateurs auront automatiquement tous les champs');
      } else {
        print('\n‚úÖ Tous les utilisateurs ont la structure compl√®te !');
      }

    } catch (e) {
      print('‚ùå Erreur lecture utilisateurs: $e');
    }
  }

  /// R√©cup√®re un g√©rant disponible pour cr√©er les terrains
  static Future<String> _getAvailableGerantId() async {
    // Chercher un g√©rant existant
    final gerantsQuery = await _firestore
        .collection('users')
        .where('role', isEqualTo: 'gerant')
        .limit(1)
        .get();

    if (gerantsQuery.docs.isNotEmpty) {
      final gerantId = gerantsQuery.docs.first.id;
      print('üìã Utilisation du g√©rant existant: $gerantId');
      return gerantId;
    }

    // Si aucun g√©rant, cr√©er un g√©rant temporaire avec structure compl√®te
    print('‚ö†Ô∏è Aucun g√©rant trouv√©, cr√©ation d\'un g√©rant temporaire...');
    final gerantRef = await _firestore.collection('users').add({
      'nom': 'G√©rant Test Automatique',
      'telephone': '771111111',
      'email': 'gerant.auto@test.com',
      'ville': 'Dakar',
      'role': 'gerant',
      'photo': null,                          // ‚Üê Nouveau champ
      'isActive': true,                       // ‚Üê Nouveau champ
      'statistiques': {                       // ‚Üê Nouveau champ avec stats g√©rant
        'terrainsGeres': 0,
        'reservationsRecues': 0,
        'chiffreAffaires': 0,
        'noteMoyenne': 0.0,
      },
      'dateCreation': FieldValue.serverTimestamp(),
    });

    print('‚úÖ G√©rant temporaire cr√©√© avec structure compl√®te');
    return gerantRef.id;
  }

  /// Cr√©e des terrains de test
  static Future<void> _createTestTerrains() async {
    print('üèüÔ∏è Cr√©ation des terrains de test...');

    // R√©cup√©rer un g√©rant disponible
    final gerantId = await _getAvailableGerantId();

    final terrains = [
      {
        'nom': 'Terrain Excellence Dakar',
        'description': 'Terrain de minifoot moderne avec √©clairage LED et vestiaires. Id√©al pour les matchs en soir√©e.',
        'ville': 'Dakar',
        'adresse': 'Plateau, Avenue L√©opold S√©dar Senghor',
        'geolocation': const GeoPoint(14.6937, -17.4441),
        'gerantId': gerantId,
        'photos': [
          'https://images.unsplash.com/photo-1556056504-5c7696c4c28d?w=800',
          'https://images.unsplash.com/photo-1574629810360-7efbbe195018?w=800',
        ],
        'equipements': ['√âclairage LED', 'Vestiaires', 'Douches', 'Parking', 'S√©curit√©', 'Buvette'],
        'prixHeure': 15000,
        'disponibilites': {
          'lundi': ['08:00-09:00', '09:00-10:00', '16:00-17:00', '17:00-18:00', '18:00-19:00'],
          'mardi': ['08:00-09:00', '10:00-11:00', '16:00-17:00', '17:00-18:00', '19:00-20:00'],
          'mercredi': ['09:00-10:00', '16:00-17:00', '17:00-18:00', '18:00-19:00', '19:00-20:00'],
          'jeudi': ['08:00-09:00', '09:00-10:00', '17:00-18:00', '18:00-19:00', '20:00-21:00'],
          'vendredi': ['15:00-16:00', '16:00-17:00', '17:00-18:00', '18:00-19:00', '19:00-20:00'],
          'samedi': ['09:00-10:00', '10:00-11:00', '14:00-15:00', '15:00-16:00', '16:00-17:00'],
          'dimanche': ['10:00-11:00', '11:00-12:00', '15:00-16:00', '16:00-17:00'],
        },
        'notemoyenne': 4.5,
        'nombreAvis': 12,
        'isActive': true,
        'dateCreation': FieldValue.serverTimestamp(),
      },
      {
        'nom': 'Stade Municipal Thi√®s',
        'description': 'Terrain communautaire avec gradins pour les spectateurs. Terrain naturel bien entretenu.',
        'ville': 'Thi√®s',
        'adresse': 'Centre-ville, Route de Mbour',
        'geolocation': const GeoPoint(14.7886, -16.9361),
        'gerantId': gerantId,
        'photos': [
          'https://images.unsplash.com/photo-1431324155629-1a6deb1dec8d?w=800',
        ],
        'equipements': ['Gradins', 'Toilettes', 'Buvette', 'Terrain naturel', 'Parking'],
        'prixHeure': 12000,
        'disponibilites': {
          'lundi': ['07:00-08:00', '16:00-17:00', '17:00-18:00'],
          'mardi': ['07:00-08:00', '08:00-09:00', '16:00-17:00', '18:00-19:00'],
          'mercredi': ['07:00-08:00', '17:00-18:00', '18:00-19:00', '19:00-20:00'],
          'jeudi': ['16:00-17:00', '17:00-18:00', '18:00-19:00', '20:00-21:00'],
          'vendredi': ['07:00-08:00', '16:00-17:00', '17:00-18:00', '18:00-19:00'],
          'samedi': ['09:00-10:00', '10:00-11:00', '15:00-16:00', '16:00-17:00'],
          'dimanche': ['09:00-10:00', '15:00-16:00', '16:00-17:00'],
        },
        'notemoyenne': 4.2,
        'nombreAvis': 8,
        'isActive': true,
        'dateCreation': FieldValue.serverTimestamp(),
      },
      {
        'nom': 'Arena Saint-Louis',
        'description': 'Terrain synth√©tique de haute qualit√© avec douches et vestiaires modernes.',
        'ville': 'Saint-Louis',
        'adresse': 'Sor, Quartier Nord',
        'geolocation': const GeoPoint(16.0402, -16.4897),
        'gerantId': gerantId,
        'photos': [
          'https://images.unsplash.com/photo-1579952363873-27d3bfad9c0d?w=800',
          'https://images.unsplash.com/photo-1529900748604-07564a03e7a6?w=800',
        ],
        'equipements': ['Terrain synth√©tique', 'Douches', 'Vestiaires', '√âclairage', 'S√©curit√©'],
        'prixHeure': 18000,
        'disponibilites': {
          'lundi': ['08:00-09:00', '17:00-18:00', '18:00-19:00'],
          'mardi': ['08:00-09:00', '09:00-10:00', '17:00-18:00'],
          'mercredi': ['17:00-18:00', '18:00-19:00', '19:00-20:00'],
          'jeudi': ['08:00-09:00', '17:00-18:00', '19:00-20:00'],
          'vendredi': ['15:00-16:00', '16:00-17:00', '17:00-18:00', '19:00-20:00'],
          'samedi': ['09:00-10:00', '10:00-11:00', '14:00-15:00', '15:00-16:00'],
          'dimanche': ['10:00-11:00', '15:00-16:00', '16:00-17:00'],
        },
        'notemoyenne': 4.8,
        'nombreAvis': 15,
        'isActive': true,
        'dateCreation': FieldValue.serverTimestamp(),
      },
      {
        'nom': 'Complex Sportif Kaolack',
        'description': 'Nouveau terrain avec √©quipements modernes au coeur de Kaolack.',
        'ville': 'Kaolack',
        'adresse': 'Quartier M√©dina, pr√®s du march√© central',
        'geolocation': const GeoPoint(14.1592, -16.0729),
        'gerantId': gerantId,
        'photos': [
          'https://images.unsplash.com/photo-1541252260730-0412e8e2108e?w=800',
        ],
        'equipements': ['√âclairage', 'Vestiaires', 'Terrain synth√©tique', 'Parking'],
        'prixHeure': 10000,
        'disponibilites': {
          'lundi': ['07:00-08:00', '17:00-18:00', '18:00-19:00'],
          'mardi': ['07:00-08:00', '17:00-18:00', '19:00-20:00'],
          'mercredi': ['17:00-18:00', '18:00-19:00'],
          'jeudi': ['07:00-08:00', '18:00-19:00', '19:00-20:00'],
          'vendredi': ['16:00-17:00', '17:00-18:00', '18:00-19:00'],
          'samedi': ['09:00-10:00', '15:00-16:00', '16:00-17:00'],
          'dimanche': ['15:00-16:00', '16:00-17:00'],
        },
        'notemoyenne': 4.0,
        'nombreAvis': 5,
        'isActive': true,
        'dateCreation': FieldValue.serverTimestamp(),
      },
    ];

    final batch = _firestore.batch();

    for (final terrain in terrains) {
      final docRef = _firestore.collection('terrains').doc();
      batch.set(docRef, terrain);
    }

    await batch.commit();
    print('‚úÖ ${terrains.length} terrains de test cr√©√©s');
  }

  /// Affiche les instructions pour cr√©er les index
  static Future<void> _showIndexInstructions() async {
    print('');
    print('üìä INDEX COMPOSITES √Ä CR√âER dans Firebase Console:');
    print('üîó https://console.firebase.google.com/project/sama-minifoot-2024/firestore/indexes');
    print('');
    print('1. Collection "terrains":');
    print('   - ville (Ascending) + isActive (Ascending)');
    print('   - gerantId (Ascending) + isActive (Ascending)');
    print('   - notemoyenne (Descending) + isActive (Ascending)');
    print('');
    print('2. Collection "reservations" (√† cr√©er plus tard):');
    print('   - joueurId (Ascending) + dateCreation (Descending)');
    print('   - terrainId (Ascending) + date (Ascending)');
    print('   - gerantId (Ascending) + statut (Ascending)');
    print('');
    print('3. Collection "avis":');
    print('   - terrainId (Ascending) + dateCreation (Descending)');
    print('   - joueurId (Ascending) + dateCreation (Descending)');
    print('   - reservationId (Ascending) + joueurId (Ascending)');
    print('');
  }

  /// Cr√©e des avis de test pour les terrains
  static Future<void> _createTestAvis() async {
    try {
      print('üí¨ Cr√©ation des avis de test...');

      // Supprimer les anciens avis et recr√©er avec la bonne structure
      print('üóëÔ∏è Suppression des anciens avis...');
      final oldAvisSnapshot = await _firestore.collection('avis').get();
      final batch = _firestore.batch();
      for (final doc in oldAvisSnapshot.docs) {
        batch.delete(doc.reference);
      }
      if (oldAvisSnapshot.docs.isNotEmpty) {
        await batch.commit();
        print('‚úÖ Anciens avis supprim√©s');
      }

      // R√©cup√©rer les terrains pour les lier aux avis
      final terrainsSnapshot = await _firestore.collection('terrains').get();
      if (terrainsSnapshot.docs.isEmpty) {
        print('‚ö†Ô∏è Aucun terrain trouv√© pour cr√©er des avis');
        return;
      }

      // R√©cup√©rer quelques utilisateurs pour cr√©er des avis
      final usersSnapshot = await _firestore.collection('users')
          .where('role', isEqualTo: 'joueur')
          .limit(3)
          .get();

      if (usersSnapshot.docs.isEmpty) {
        print('‚ö†Ô∏è Aucun joueur trouv√© pour cr√©er des avis');
        return;
      }

      final List<Avis> avisTest = [];
      int avisCounter = 1;

      // Cr√©er des avis pour chaque terrain avec le nouveau mod√®le
      for (final terrainDoc in terrainsSnapshot.docs.take(3)) {
        for (final userDoc in usersSnapshot.docs) {
          final userData = userDoc.data() as Map<String, dynamic>;
          final avis = Avis(
            id: 'avis_test_$avisCounter',
            utilisateurId: userDoc.id,
            utilisateurNom: userData['nom'] ?? 'Utilisateur $avisCounter',
            terrainId: terrainDoc.id,
            note: (3 + (avisCounter % 3)), // Notes entre 3 et 5
            commentaire: _getRandomComment(avisCounter),
            dateCreation: DateTime.now().subtract(Duration(days: avisCounter * 2)),
          );
          avisTest.add(avis);
          avisCounter++;
        }
      }

      // Sauvegarder les avis dans Firestore
      final newBatch = _firestore.batch();
      for (final avis in avisTest) {
        final docRef = _firestore.collection('avis').doc(avis.id);
        newBatch.set(docRef, avis.toFirestore());
      }

      await newBatch.commit();

      print('‚úÖ ${avisTest.length} avis de test cr√©√©s');

      // Mettre √† jour les notes moyennes des terrains
      await _updateTerrainsRatings();

    } catch (e) {
      print('‚ùå Erreur lors de la cr√©ation des avis: $e');
    }
  }

  /// Met √† jour les notes moyennes des terrains bas√©es sur les avis
  static Future<void> _updateTerrainsRatings() async {
    try {
      final terrainsSnapshot = await _firestore.collection('terrains').get();

      for (final terrainDoc in terrainsSnapshot.docs) {
        final avisSnapshot = await _firestore
            .collection('avis')
            .where('terrainId', isEqualTo: terrainDoc.id)
            .get();

        if (avisSnapshot.docs.isNotEmpty) {
          final notes = avisSnapshot.docs
              .map((doc) => (doc.data()['note'] as int).toDouble())
              .toList();

          final noteMoyenne = notes.reduce((a, b) => a + b) / notes.length;

          await terrainDoc.reference.update({
            'noteMoyenne': double.parse(noteMoyenne.toStringAsFixed(1)),
            'nombreAvis': notes.length,
          });
        }
      }

      print('‚úÖ Notes moyennes des terrains mises √† jour');
    } catch (e) {
      print('‚ùå Erreur lors de la mise √† jour des notes: $e');
    }
  }

  /// Retourne un commentaire al√©atoire pour les avis de test
  static String _getRandomComment(int index) {
    final comments = [
      'Excellent terrain, tr√®s bien entretenu !',
      'Bon terrain mais pourrait √™tre mieux √©clair√©.',
      'Parfait pour jouer entre amis, recommand√© !',
      'Terrain correct, vestiaires propres.',
      'Tr√®s bon accueil, terrain en bon √©tat.',
      'Prix raisonnable, qualit√© correcte.',
      'Super exp√©rience, on reviendra !',
      'Terrain un peu dur mais jouable.',
      'Excellente infrastructure, tr√®s propre.',
      'Bon rapport qualit√©-prix.',
    ];

    return comments[index % comments.length];
  }
}

// üéØ EXTENSION POUR FIRESTORE
extension FirestoreInitExtension on FirebaseFirestore {
  Future<void> initTestDataNoMigration() async {
    await FirestoreInitService.initializeTestData();
  }
}
